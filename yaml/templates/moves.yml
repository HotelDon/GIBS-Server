moveList:  
    # Unique name, no spaces
    moveName:
        # The name of the move, as it's displayed to users. 
        displayName:
        # This is where move stats are defined. It must have an entry for every move stat defined in
        # moveStats. Each stat can either have a numerical value or be blank, since all move stats 
        # are optional, with one possible exception. 
        stats:
            # If mp is enabled, then this is where you define how much MP this move has. If MP is
            # mandatory, then this field must have a number greater than 0. Otherwise, leaving it
            # blank or setting it to zero will give it infinite MP. 
            mp:
            # Leaving a stat blank means it doesn't have this stat...
            statName1: 
            # And assigning a number to it means it does. 
            statName2: 25
            statName3: 400
        # Properties are non-numerical values that a move can have. Since everything in properties 
        # is optional, you can omit this block 
        properties:
            # Yes, even this is optional. A move without a success formula will always succeed. 
            successFormula:
            # Optional. A move without an element ignores all elemental properties. 
            element:
            # The default target for this move - since it's possible for a move to have different
            # targets depending on a variety of factors, this is the one that is shown to players
            # when looking up move information. Leaving this blank instead means it will instead
            # use the first target found in the success block. 
            target:
            # You can include any number of custom properties on a move. 
            propertyName1:
        # Here is where the meat of the move definitions come in, in one of four result blocks.
        # Each result block is a list of actions that take effect in the order they are listed. 
        # There are many different possibilities for actions, and they are described below.
        # The first result type is the easiest to understand. Success is the block that is called
        # when the success formula succeeds, or if there is no success formula defined, 
        # it will always run first.  
        success:
              # The msg entry causes a message to be displayed to the player, and can be any string.
              # This isn't always necessary for success, since damaging moves are obvious about
              # their effects, but nonstandard moves can use it to inform the player of what is
              # happening. 
            - msg:
              # The damage entry defines how the move damages the target. It takes an array with two
              # items: the first is the target, and the second is a previously defined damage
              # formula (or flat damage value, if that is allowed). The following is the list of
              # target types: Foe Single, Foes Adjacient, Foes All, Single Any, All Adjacient, All, Self, Self
              # Partner adjacient, Partner, Partner Adjacient, All Partners
            - damage: [""]
              # Sometimes, you'll want certain actions to be triggered only under certain conditions.
              # A conditional entry will allow you to define the situations under which this action
              # will trigger, and what that action will be. 
            - conditional:
                # Here is where you define the condition that your action will trigger under. 
                # The if statement is technically a formula, although has slightly different rules;
                # They are listed in the formula document. When a move encounters an if statement,
                # it is evaluated and the result is given as either true or false. 
                if: ""
                # If the "if" entry evaluates to true, then the contents of "then" will execute. 
                # If it evaluates to false then it is ignored. The contents of the "then" entry
                # is essentially another result block, and can contain anything the main 
                # results block does. You can even put another conditional statement inside of it, 
                # if you need some super crazy conditional logic. 
                then:
                    - msg:
                    - dmg:
                # The elseIf entry is optional, and is only checked if the previous if statement  
                # returns as false. It contains another set of if/then statements, and optionally
                # can also have an elseif statement that follows the same rules, for however many
                # layers deep you want to go. Protip: Less is more.
                elseif:
                    if: ""
                    then: []
                    elseif:
                        if: ""
                        then: []
                # Optional. The else condition runs if no if statement ever returns as true.
                # It is formatted the same as a then entry. 
                else: []
              # Random allows an effect to be trigged via random number generator.  
            - random:
                # The probability of this event being triggered. This can either be a flat number
                # or a formula. Remember, probabilities should be numbers between 0 and 1, with 0
                # being impossible, and 1 always triggering. If the event is supposed to be random,
                # it should usually resolve to a number in between 0 and 1. 
                probability:
                # Same format as any other results block (It's even called "result" this time!).  
                result:
              # If a move stat is left undefined in the stats entry, or if you want to change
              # the value of a stat in a conditional, you can do so in a results entry.
              # You can not touch Battler stats in this way. 
            - setStat: statName1 = 50
              # Same goes for properties.
            - propertyName1: propertyNameWhatever = "cool"
            # The word "fail" by itself has a special meaning when put into the list of actions.
            # If encountered, all subsequent entries in the list are ignored and the result
            # transitions from the success entry to the failure entry. This ONLY happens in the
            # success block; fail is rejected in all other blocks. Fail entries work best in 
            # conditional or random results - a move that always fails for no reason is a joke.  
            - fail
        # Optional. The noSuccess entry defines what happens if a battler fails a success check 
        # when using this move. If this block is undefined, then by default it will display a 
        # default message and do nothing else. Defining the noSuccess entry means you can specify 
        # more complex behavior if a move doesn't succeed, and/or override the default message. 
        # If a move has no success formula defined, this block will never run.
        noSuccess:
            - msg:
        # Also optional. Failure is a distinct result type from noSuccess. A move can succeed, but
        # then fail for other reasons (for example, imagine trying to use a recovery move at full
        # health). If the success block encounters a "fail" entry, the success block immediately
        # stops, and the failure block starts. Like noSuccess, the failure block has a default
        # message if undefined. Defining this entry allows you to add more complex behavior if a 
        # move fails, and/or override the default message. 
        failure:
            - msg:
        # Also optional. The noTarget entry runs when the field has no valid targets left for your
        # move. A move that noTargets, by default, uses no MP and displays a message. By defining
        # this entry, however, you can add more complex fallback behavior, or override the default
        # message.
        noTarget:
    # The default block currently defines fallback messages so if a move doesn't define anything in
    # a results block, the game can still display a message to avoid confusing the player. 
    # In the future, it may define other default behavior as well.
    default:
        # Note that the default message for success, under normal circumstances, should never be seen. 
        # Your moves should visably do something if they are successful, and should have a custom
        # message displayed if it takes multiple turns to work or has some other nonstandard behavior. 
        successMsg: "But it didn't do anything..."
        # Conversely, for failure, nosuccess, and notarget, there isn't always a need to define 
        # these blocks for a move, so the default messages are a useful fallback to save time.
        noSuccessMsg: "But it missed!"
        failureMsg: "But it didn't work..."
        noTarget: "But there's nobody there!"